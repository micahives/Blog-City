
<link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">

<div class="mt-12 max-w-md mx-auto bg-white shadow-lg overflow-hidden sm:rounded-lg">
  <div class="px-6 py-4 border border-gray-300">
    <!-- Title -->
    <h2 class="text-lg font-semibold text-primary-700">{{ blogPost.dataValues.title }}</h2>

    <!-- Author -->
    <div class="text-sm text-gray-500">
      by <strong>{{ blogPost.dataValues.author }}</strong>
    </div>

    <!-- Separator Line -->
    <hr class="my-2 border-t border-gray-300">

    <!-- Summary -->
    <p class="text-base text-gray-700">{{ blogPost.dataValues.summary }}</p>


   <!-- Delete, Edit, and Back to Dashboard Buttons -->
   {{#if (eq source 'dashboard')}}
    <div class="flex justify-between mt-12">
      <button id="deleteButton" class="px-4 py-2 bg-red-500 text-white rounded-md hover:bg-red-600 focus:outline-none focus:ring focus:border-red-300">
        Delete
      </button>
      <button id="editButton" class="px-4 py-2 bg-blue-500 text-white rounded-md hover:bg-blue-600 focus:outline-none focus:ring focus:border-blue-300">
        Edit
      </button>
      <a href="/dashboard" class="px-4 py-2 bg-green-500 text-white rounded-md hover:bg-green-600 focus:outline-none focus:ring focus:border-green-300">
        Back to Dashboard
      </a>
    </div>
  </div>
</div>
{{/if}}

{{!-- edit fields --}}
<div id="editFields" class="hidden mt-4 max-w-md mx-auto bg-white shadow-md overflow-hidden sm:rounded-lg">
  <div class="px-6 py-4">
    <label for="editTitle" class="text-lg font-semibold text-primary-700">Edit Title:</label>
    <input type="text" id="editTitle" class="w-full px-3 py-2 border rounded-md focus:outline-none focus:ring focus:border-primary-500" value="{{ blogPost.dataValues.title }}">
    <label for="editSummary" class="mt-4 text-lg font-semibold text-primary-700">Edit Summary:</label>
    <textarea id="editSummary" class="w-full h-32 px-3 py-2 border rounded-md focus:outline-none focus:ring focus:border-primary-500">{{ blogPost.dataValues.summary }}</textarea>
    <div class="mt-4 flex justify-end">
      <button id="saveChangesButton" class="px-4 py-2 bg-primary-500 text-white rounded-md hover:bg-primary-600 focus:outline-none focus:ring focus:border-primary-300">
        Save Changes
      </button>
      <button id="cancelEditButton" class="ml-4 px-4 py-2 bg-gray-300 text-gray-700 rounded-md hover:bg-gray-400 focus:outline-none focus:ring focus:border-gray-500">
        Cancel
      </button>
    </div>
  </div>
</div>

<!-- Delete Confirmation Modal -->
<div id="deleteConfirmationModal" class="hidden fixed inset-0 z-10 overflow-y-auto">
  <div class="flex items-end justify-center min-h-screen pt-4 px-4 pb-20 text-center sm:block sm:p-0">
    <div class="fixed inset-0 transition-opacity" aria-hidden="true">
      <div class="absolute inset-0 bg-gray-500 opacity-75"></div>
    </div>

    <!-- element for centering the modal contents -->
    <span class="hidden sm:inline-block sm:align-middle sm:h-screen" aria-hidden="true">&#8203;</span>

    <div class="inline-block align-bottom bg-white rounded-lg text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-lg sm:w-full">
      <div class="bg-white px-4 pt-5 pb-4 sm:p-6 sm:pb-4">
        <div class="sm:flex sm:items-start">
          <div class="mx-auto flex-shrink-0 flex items-center justify-center h-12 w-12 rounded-full bg-red-100 sm:mx-0 sm:h-10 sm:w-10">
            <svg class="h-6 w-6 text-red-600" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" aria-hidden="true">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6 6h12a2 2 0 002-2V7a2 2 0 00-2-2H8a2 2 0 00-2 2v10a2 2 0 002 2z"></path>
            </svg>
          </div>
          <div class="mt-3 text-center sm:mt-0 sm:ml-4 sm:text-left">
            <h3 class="text-lg leading-6 font-medium text-gray-900">
              Delete Blog Post
            </h3>
            <div class="mt-2">
              <p class="text-sm text-gray-500">
                Are you sure you want to delete this blog post? This action cannot be undone.
              </p>
            </div>
          </div>
        </div>
      </div>
      <div class="bg-gray-50 px-4 py-3 sm:px-6 sm:flex sm:flex-row-reverse">
        <button id="confirmDeleteButton" type="button" class="w-full inline-flex justify-center rounded-md border border-transparent shadow-sm px-4 py-2 bg-red-600 text-base font-medium text-white hover:bg-red-700 focus:outline-none focus:ring focus:border-red-300 sm:ml-3 sm:w-auto sm:text-sm">
          Delete
        </button>
        <button id="cancelDeleteButton" type="button" class="mt-3 w-full inline-flex justify-center rounded-md border border-gray-300 shadow-sm px-4 py-2 bg-white text-base font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring focus:border-blue-300 sm:mt-0 sm:ml-3 sm:w-auto sm:text-sm">
          Cancel
        </button>
      </div>
    </div>
  </div>
</div>

<!-- Comments Section -->
<div id="commentsContainer" class="mt-8">
  <h3 class="text-lg font-semibold text-primary-700">Comments</h3>
  
  {{#each blogPost.dataValues.comments}}
    {{#each this}}
      <div class="mt-4 border-t border-gray-300">
        <p class="text-base text-gray-700">{{ this.summary }}</p>
        <div class="text-sm text-gray-500">
          by <strong>{{ this.author }}</strong>
        </div>
      </div>
    {{/each}}
  {{/each}}
</div>

<!-- Comment Submission Form -->
<div class="mt-8">
  <h3 class="text-lg font-semibold text-primary-700">Add a Comment</h3>
  <form id="commentForm">
    <textarea id="commentText" class="w-full h-32 px-3 py-2 border rounded-md focus:outline-none focus:ring focus:border-primary-500" placeholder="Write your comment here"></textarea>
    <button type="button" id="submitCommentButton" class="mt-4 px-4 py-2 bg-primary-500 text-white rounded-md hover:bg-primary-600 focus:outline-none focus:ring focus:border-primary-300">
      Submit Comment
    </button>
  </form>
</div>


<div id="confirmationMessage" class="hidden"></div>

<input type="hidden" id="authorValue" value="{{ blogPost.dataValues.author }}">

<script>
  document.addEventListener('DOMContentLoaded', function () {
    // Set to store rendered comment IDs
    let renderedComments = new Set();

    function openDeleteModal() {
      const modal = document.getElementById('deleteConfirmationModal');
      modal.classList.remove('hidden');
    }

    function closeDeleteModal() {
      const modal = document.getElementById('deleteConfirmationModal');
      modal.classList.add('hidden');
    }

    document.getElementById('deleteButton').addEventListener('click', function () {
      openDeleteModal();
    });

    document.getElementById('confirmDeleteButton').addEventListener('click', function () {
      closeDeleteModal();

      const postId = {{ blogPost.dataValues.id }};

      fetch(`/dashboard/blog-post/${postId}`, {
        method: 'DELETE',
        headers: {
          'Content-Type': 'application/json',
        },
      })
        .then(response => {
          if (!response.ok) {
            throw new Error(`Error: ${response.status} - ${response.statusText}`);
          }
          return response.json();
        })
        .then(data => {
          console.log(data.message);

          const confirmationMessage = document.getElementById('confirmationMessage');
          confirmationMessage.innerText = 'Blog post deleted successfully!';
          confirmationMessage.classList.remove('hidden');

          window.location.href = '/dashboard';

        })
        .catch(error => {
          console.error('Error deleting blog post:', error.message);
        });
    });

    document.getElementById('cancelDeleteButton').addEventListener('click', function () {
      closeDeleteModal();
    });

    const editButton = document.getElementById('editButton');
    const editFields = document.getElementById('editFields');
    const cancelEditButton = document.getElementById('cancelEditButton');

    if (editButton) {
      editButton.addEventListener('click', function () {
        // Show the edit fields
        editFields.classList.remove('hidden');
      });
    }

    if (cancelEditButton) {
      cancelEditButton.addEventListener('click', function () {
        // Hide the edit fields
        editFields.classList.add('hidden');
      });
    }

    const saveChangesButton = document.getElementById('saveChangesButton');

    if (saveChangesButton) {
      saveChangesButton.addEventListener('click', async function () {
        const updatedTitle = document.getElementById('editTitle').value;
        const updatedSummary = document.getElementById('editSummary').value;
        const postId = {{ blogPost.dataValues.id }};

        try {
          const response = await fetch(`/dashboard/blog-post/${postId}`, {
            method: 'PUT',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({ title: updatedTitle, summary: updatedSummary }),
          });

          if (response.ok) {
            window.location.reload(); // Reload the page after a successful update
          } else {
            console.error('Error updating blog post:', response.statusText);
          }
        } catch (error) {
          console.error('Error updating blog post:', error.message);
        }
      });
    }

    const submitCommentButton = document.getElementById('submitCommentButton');

    if (submitCommentButton) {
      submitCommentButton.addEventListener('click', async function () {
        const commentText = document.getElementById('commentText').value;
        const postId = {{ blogPost.dataValues.id }};
        const author = document.getElementById('authorValue').value;

        console.log('Submitting comment:', commentText, 'for post ID:', postId);

        try {
          const response = await fetch(`/dashboard/blog-post/${postId}/comment`, {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({ summary: commentText, author: author }),
          });

          if (!response.ok) {
            throw new Error(`Error: ${response.status} - ${response.statusText}`);
          }

          const newComment = await response.json();
          console.log('New comment:', newComment);

          // Check if the comment ID is already rendered on the page
          if (!renderedComments.has(newComment.comment.id)) {
            const commentsContainer = document.getElementById('commentsContainer');
            const newCommentDiv = document.createElement('div');
            newCommentDiv.classList.add('mt-4', 'border-t', 'border-gray-300');
            newCommentDiv.innerHTML = `
              <p class="text-base text-gray-700">${newComment.comment.summary}</p>
              <div class="text-sm text-gray-500">
                by <strong>${newComment.comment.author || 'Unknown Author'}</strong>
              </div>
            `;
            commentsContainer.appendChild(newCommentDiv);

            // Add the comment ID to the set of rendered comments
            renderedComments.add(newComment.comment.id);
          }

          // Clear the comment text area
          document.getElementById('commentText').value = '';
        } catch (error) {
          console.error('Error submitting comment:', error.message);
        }
      });
    }
  });
</script>


